---
layout: post
title:  "Specification"
date:   2018-11-10 04:10:03 +0900
categories: [JPA]
---

####
 - JPA Criteria API 사용
 - 동적쿼리 생성이 가능
 - 재사용과 조합가능
 - 복잡, 어려움
 - type-safe 아님(MetaModel보완가능)

Spring Data JPA에서 Repository에 정의된 Method만으로 손쉽게 쿼리를 구현할 수 있다. 
사용을 하다보면 다이나믹한 쿼리를 만들어야 할 때가 있는데 이때 Specification을 이용한 방법이 있다. 


Specification이 기본적으로 제공해주고 있기에 별다른 세팅없이 사용할 수가 있다. 
다른 방법으로 QueryDSL, JOOQ 등이 있으니 참고하면 된다. 

회원정보를 조회하는 경우 
findById(); ID조회 
findByName() : 이름으로 조회 
findByIdAndName :ID와 이름으로 조회 

각 필드별로 생성을 해야 하고 ID만 입력된 경우 이름만 입력된 경우를 체크를 해줘야 하는 번거로움이 있다. 

이를 해결하기 위해서 Specification을 사용하여 입력이 된 경우에만 조회가 될 수 있는 기능을 만들 수 있다. 

우선  Specification를 사용하기 위해서는 먼저 Repository 인터페이스를 JpaSpecificationExecutor


```java
public static Specification<MemberEntity> hasName(final String name) {
   return  StringUtils.isEmpty(name) ? null : ( root, query,  cb) -> cb.equal(root.get("name"), name);
}
```

```java
public static Specification<MemberEntity> hasLoginId(final String loginId) {
   return  StringUtils.isEmpty(loginId) ? null : ( root, query,  cb) -> cb.equal(root.get("loginId"), loginId);
}
```

```java
public  List < User >  findUsers ( String  name ,  String  email ,  Tag  followTag ,  Long  ContributionCount )  { 
    return  userRepository . findAll ( Specifications 
        . where ( hasLoginId ( name )) 
        . and ( hasName ( email )) 
    ); 
}
```

인수가 null이거나 공백일 때 null를 return을 해서 검색조건에서 제외시킬 수 있다. 

사용자 이름과 ID가 존재하는 경우 필요에 따라 메소드형식으로 만들어 줘야 하는 문제가 있다. 
findByNameAndId();
findByName(); 
findById();    
findAll();
